apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: run-
spec:
  entrypoint: run
  imagePullSecrets:
    - name: regcred

  templates:
  - name: run
    steps:
    # Download weather forecasts, and transform the data such that it can be used in D-HYDRO
    - - name: generate-setup
        template: generate-setup
    # Generate a list of all the model runs that need to be performed
    - - name: gen-file-list
        template: gen-file-list
    # Iterate over the list of numbers generated by the generate step above
    - - name: dhydro
        template: dhydro-run
        arguments:
          parameters:
          - name: file
            value: "{{item}}"
        withParam: "{{steps.gen-file-list.outputs.result}}" 
    # Make images from the model results
    - - name: post-processing
        template: post


  # Generate model input files
  - name: generate-setup
    inputs:
        artifacts:
          - name: model-setup
            path: /model-setup/model-setup.zip
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: model-setup/model-setup.zip
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key

          - name: meteo
            path: /model-setup/meteo-areas.zip
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: model-setup/meteo-areas.zip
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key
            
          - name: settings
            path: /app/fedde-prepare-model/settings.txt
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: model-setup/settings.txt
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key 

    container:
      image: # refer to prepare-runs container
      command: [sh, -c]
      args: ["unzip /model-setup/model-setup.zip -d /app/fedde-prepare-model/model-setup/;
              unzip /model-setup/meteo-areas.zip -d /app/fedde-prepare-model/meteo-areas/;
              ls /app/fedde-prepare-model/model-setup/;
              python -u /app/script/modify_model.py;
              cd /app/fedde-prepare-model/model-specifics/;
              for i in *; do zip -r -j $i'.zip' $i; done;
              find . -type f ! -name '*.zip' -delete"]
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "1Gi"
          cpu: "1"
    outputs:
      artifacts:
        - name: model-specifics
          path: /app/fedde-prepare-model/model-specifics
          azure:
            endpoint: $ENDPOINT$
            container: data
            blob: wdir/model-specifics
            accountKeySecret:
              name: my-azure-storage-credentials
              key: account-access-key
          archive:
            none: {}
          
  - name: gen-file-list
    inputs:
        artifacts:
          - name: file-list
            path: data/folders/
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: wdir/model-specifics/
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import os
        import json
        files = [x[:-4] for x in os.listdir(r"/data/folders")]
        with open("/tmp/data.json", 'w') as f:
            json.dump(files, f)
        json_string = json.dumps(files)
        print(json_string)
    outputs:
      artifacts:
        - name: file-list 
          path: /tmp/data.json
          azure:
            endpoint: $ENDPOINT$
            container: data
            blob: wdir/file-list.json
            accountKeySecret:
              name: my-azure-storage-credentials
              key: account-access-key
          archive:
            none: {}  

  - name: dhydro-run
    inputs:
      parameters:
        - name: file
      artifacts:
          - name: model-setup
            path: /model-zip-files/model-setup.zip
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: model-setup/model-setup.zip
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key
          - name: model-specifics
            path: /model-zip-files/specifics.zip
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: wdir/model-specifics/{{inputs.parameters.file}}.zip
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key
          - name: run-docker
            path: /data/run_docker.sh
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: model-setup/run_docker.sh
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key
          - name: script-case
            path: /scripts/case-sensitivity.py
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: model-setup/case-sensitivity.py
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key
    container:
      image: # refer to dhydro container made by Delaters
      command: [sh, -c]
      args: ["yum install unzip -y;
              unzip /model-zip-files/model-setup.zip -d /data/;
              unzip /model-zip-files/specifics.zip -d /model-specifics/;
              mv -v /model-specifics/DEFAULT.BUI /data/rr/;
              mv -v /model-specifics/DEFAULT.EVP /data/rr/;
              mv -v /model-specifics/DELFT_3B.INI /data/rr/;
              mv -v /model-specifics/demo.mdu /data/fm/;
              python /scripts/case-sensitivity.py;
              sh /data/run_docker.sh;
              ls /data/fm/output;
              ls /scripts"]
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "1Gi"
          cpu: "1"
    outputs:
      artifacts:
      - name: output-{{inputs.parameters.file}}
        path: /data/fm/output
        azure:
            endpoint: $ENDPOINT$
            container: data
            blob: output/output-{{inputs.parameters.file}}.tgz
            accountKeySecret:
              name: my-azure-storage-credentials
              key: account-access-key   

  - name: post
    inputs:
      artifacts:
        - name: model_data
          path: /data/model-files
          azure:
            endpoint: $ENDPOINT$
            container: data
            blob: output/
            accountKeySecret:
              name: my-azure-storage-credentials
              key: account-access-key   
    container:
      image: # refer to post production container
      command: [sh, -c]
      args: ["mkdir /data/output/;
              cd /data/model-files/;
              ls *.tgz | xargs -n1 tar zxv -C /data/output/ -f;
              python -u /code/app/main.py"]
      resources:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "1Gi"
          cpu: "1"
    outputs:
      artifacts:
          - name: images
            path: /data/images
            azure:
              endpoint: $ENDPOINT$
              container: data
              blob: images/images.tgz
              accountKeySecret:
                name: my-azure-storage-credentials
                key: account-access-key  
            
